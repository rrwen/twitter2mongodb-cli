#!/usr/bin/env node

// Richard Wen
// rrwen.dev@gmail.com

var envfile = require('envfile');
var fs = require('fs');
var path = require('path');
var twitter2mongodbcli = require(path.join(__dirname, '../index.js'));

// (cli_config_base) Setup base config file
var baseConfigFile = path.join(__dirname, 'config.json');
var configDefaults = {
	'twitter.method': 'get',
	'twitter.path': 'search/tweets',
	'twitter.params': '{"q":"twitter"}',
	'config': baseConfigFile,
	'env': './.env'
};
if (!fs.existsSync(baseConfigFile)) {
	fs.writeFileSync(baseConfigFile, JSON.stringify(configDefaults));
}
var baseConfig = JSON.parse(fs.readFileSync(baseConfigFile)) || {};
baseConfig.config = baseConfig.config || baseConfigFile;

// (cli_config) Setup config file
var configFile = baseConfig.config;
if (!fs.existsSync(configFile)) {
	fs.writeFileSync(configFile, JSON.stringify(configDefaults));
}
var config = JSON.parse(fs.readFileSync(configFile));

// (cli_config_default) Set config defaults
var configChanged = false;
for (var k in baseConfig) {
	if (config[k] == undefined) {
		config[k] = baseConfig[k];
		configChanged = true;
	}
}
for (var k in configDefaults) {
	if (config[k] == undefined) {
		config[k] = configDefaults[k];
		configChanged = true;
	}
};
if (configChanged) {
	fs.writeFileSync(configFile, JSON.stringify(config));
}

// (cli_env) Setup env file
var envFile = config.env || './.env';
var envDefaults = {
	TWITTER_CONSUMER_KEY: '***',
	TWITTER_CONSUMER_SECRET: '***',
	TWITTER_ACCESS_TOKEN_KEY: '***',
	TWITTER_ACCESS_TOKEN_SECRET: '***',
	MONGODB_CONNECTION: 'mongodb://localhost:27017',
	MONGODB_DATABASE: 'twitter_database',
	MONGODB_COLLECTION: 'twitter_data'
};
if (!fs.existsSync(envFile)) {
	fs.writeFileSync(envFile, envfile.stringifySync(envDefaults));
}
require('dotenv').config({path: envFile || '.env'});

// (cli_command) Setup config and env management commands
var configManage = require('yargs-command-config')({
	defaults: configDefaults
});
var envManage = require('yargs-command-env')({
	defaults: envDefaults
});

// (cli) Command line config
var argv = require('yargs')
	.usage('\nCommand line tool for extracting Twitter data to MongoDB databases.\n\nUsage: \n\  $0 <command>\n\  $0 [options]')
	.config(config)
	.command(configManage)
	.command(envManage)
	.command('doc <type>', 'Open documentation in web browser')
	.command('save <script>', 'Save script with current options')
	.command('query <method> <query>', 'Run a MongoDB query')
	.describe('config', 'Path to default config file')
	.describe('env', 'Path to environment file for storing API keys and connections')
	.describe('twitter.method', 'get/post/delete/stream')
	.describe('twitter.path', 'API path')
	.describe('twitter.params', 'API request parameters')
	.describe('mongodb.method', 'MongoDB query method')
	.describe('mongodb.collection', 'collection name')
	.describe('jsonata', 'JSON filter before pg.query')
	.describe('twitter.connection', 'Twitter API keys')
	.describe('twitter.connection.consumer_key', '')
	.describe('twitter.connection.consumer_secret', '')
	.describe('twitter.connection.access_token_key', '')
	.describe('twitter.connection.access_token_secret', '')
	.describe('mongodb.connection', 'MongoDB connection URL')
	.describe('mongodb.database', 'database name')
	.alias('v', 'verbose')
	.describe('verbose', 'Display extra log messages')
	.boolean('v')
	.alias('h', 'help')
	.help('h')
	.example('$0 doc twitter2mongodb', 'Open twitter2mongodb-cli doc')
	.example('$0 doc twitter', 'Open Twitter API doc')
	.example('$0 doc mongodb', 'Open MongoDB doc')
	.example('$0 config view', 'View config defaults')
	.example('$0 env view', 'View env defaults')
	.example('\n$0 query find {}', '\nFind all in collection')
	.example('\n$0', '\nExtract twitter data to collection')
	.example('$0 > log.csv', 'Extract and log twitter data to collection')
	.example('$0 save path/script.js', 'Save script with options')
	.argv;
var cmd = argv._[0];

// (command_doc) Open docs in browser
if (cmd == 'doc') {
	var opn = require('opn');
	if (argv.type.toLowerCase() == 'twitter2mongodb') {
		opn('https://www.github.com/rrwen/twitter2mongodb-cli');
	} else if (argv.type.toLowerCase() == 'twitter') {
		opn('https://developer.twitter.com/en/docs');
	} else if (argv.type.toLowerCase() == 'mongodb') {
		opn('https://docs.mongodb.com/');
	}
}

// (command_query) Run query in MongoDB
if (cmd == 'query') {
	var MongoClient = require('mongodb').MongoClient;
	argv.mongodb = argv.mongodb || {};
	argv.mongodb.connection = argv.mongodb.connection || process.env.MONGODB_CONNECTION || 'mongodb://localhost:27017';
	argv.mongodb.database = argv.mongodb.database ||  process.env.MONGODB_DATABASE || 'test';
	argv.mongodb.collection = argv.mongodb.collection || process.env.MONGODB_COLLECTION || 'twitter_data';
	MongoClient.connect(argv.mongodb.connection, function(err, client) {
		if (err) {
			console.error(err.message);
			client.close();
			process.exit(1);
		}
		var collection = client.db(argv.mongodb.database).collection(argv.mongodb.collection);
		argv.query = JSON.parse(argv.query);
		collection[argv.method](argv.query, function(err, result) {
			if (argv.method.substr(0, 4) == 'find') {
				result.toArray(function(err, docs) {
					if (err) {
						console.error(err.message);
						client.close();
						process.exit(1);
					}
					console.log(docs);
					client.close();
					process.exit(0);
				});
			} else {
				console.log(argv.method + ' query with ' + JSON.stringify(argv.query) + ' for ' + argv.mongodb.database + '.' + argv.mongodb.collection);
				client.close();
				process.exit(0);
			}
		});
	});
}

// (command) Run twitter2mongodb
if (argv._.length < 1) {
	twitter2mongodbcli(argv);
}

// (command_save) Save runnable script with current options
if (cmd == 'save') {
	var scriptPath = argv.script;
	var script = '// Created with command `twitter2mongodb save <script>`\n// See twitter2mongodb-cli (https://www.npmjs.com/package/twitter2mongodb-cli)\n\n' + 'var twitter2mongodbcli = require(\'' + path.join(__dirname, '../index.js').replace(/\\/g,"/") + '' + '\');\n\n'  + 'var argv = ' + JSON.stringify(argv, null, 4) + ';\n\ntwitter2mongodbcli(argv);\n';
	fs.writeFile(scriptPath, script, function (err) {
		if (err) {
			return console.error(err);
		}
		console.log('Saved ' + scriptPath);
	});
}